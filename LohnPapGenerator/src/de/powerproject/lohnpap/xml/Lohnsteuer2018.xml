<PAP name="Lohnsteuer2018Big" version="1.0" versionNummer="1.0">   
    <VARIABLES> 
		<!-- Stand: 2017-11-24 -->
		<!-- ITZBund Düsseldorf--> 

   		 <!--  EINGABEPARAMETER  -->
        <INPUTS>
            <!-- 1, wenn die Anwendung des Faktorverfahrens gewählt wurden (nur in Steuerklasse IV) -->
	        <INPUT name="af" type="int" default="1"/>
	
	        <!-- Auf die Vollendung des 64. Lebensjahres folgende
	             Kalenderjahr (erforderlich, wenn ALTER1=1) -->
	        <INPUT name="AJAHR" type="int"/>
	
	        <!-- 1, wenn das 64. Lebensjahr zu Beginn des Kalenderjahres vollendet wurde, in dem
	             der Lohnzahlungszeitraum endet (§ 24 a EStG), sonst = 0 -->
	        <INPUT name="ALTER1" type="int"/>
	
	        <!-- in VKAPA und VMT enthaltene Entschädigungen nach §24 Nummer 1 EStG in Cent -->
	        <INPUT name="ENTSCH" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- eingetragener Faktor mit drei Nachkommastellen -->
	        <INPUT name="f" type="double" default="1.0"/>
	
	        <!-- Jahresfreibetrag nach Maßgabe der Eintragungen auf der
	             Lohnsteuerkarte in Cents (ggf. 0) -->
	        <INPUT name="JFREIB" type="BigDecimal"/>
	
	        <!-- Jahreshinzurechnungsbetrag in Cents (ggf. 0) -->
	        <INPUT name="JHINZU" type="BigDecimal"/>
	
	        <!-- Voraussichtlicher Jahresarbeitslohn ohne sonstige Bezüge und ohne Vergütung für mehrjährige Tätigkeit in Cent. 
	             Anmerkung: Die Eingabe dieses Feldes (ggf. 0) ist erforderlich bei Eingabe „sonsti-ger Bezüge“ (Feld SONSTB) 
	             oder bei Eingabe der „Vergütung für mehrjährige Tätigkeit“ (Feld VMT).
	             Sind in einem vorangegangenen Abrechnungszeitraum bereits sonstige Bezüge gezahlt worden, so sind sie dem 
	             voraussichtlichen Jahresarbeitslohn hinzuzurechnen. Vergütungen für mehrere Jahres aus einem vorangegangenen 
	             Abrechnungszeitraum sind in voller Höhe hinzuzurechnen. --> 
	        <INPUT name="JRE4" type="BigDecimal"/>
	 
	        <!-- In JRE4 enthaltene Versorgungsbezuege in Cents (ggf. 0) -->
	        <INPUT name="JVBEZ" type="BigDecimal"/>
	
			<!--Merker für die Vorsorgepauschale
				2 = der Arbeitnehmer ist NICHT in der gesetzlichen Rentenversicherung versichert.
				
				1 = der Arbeitnehmer ist in der gesetzlichen Rentenversicherung versichert, es gilt die 
					Beitragsbemessungsgrenze OST.
					
				0 = der Arbeitnehmer ist in der gesetzlichen Rentenversicherung versichert, es gilt die 
					Beitragsbemessungsgrenze WEST. -->
	        <INPUT name="KRV" type="int"/>
	
			<!-- Einkommensbezogener Zusatzbeitragssatz eines gesetzlich krankenversicherten Arbeitnehmers, 
			 auf dessen Basis der an die Krankenkasse zu zahlende Zusatzbeitrag berechnet wird,
			 in Prozent (bspw. 0,90 für 0,90 %) mit 2 Dezimalstellen. 
			 Der von der Kranken-kasse festgesetzte Zusatzbeitragssatz ist bei Abweichungen unmaßgeblich. -->
			<INPUT name="KVZ" type="BigDecimal"/>
	
	        <!-- Lohnzahlungszeitraum:
	             1 = Jahr
	             2 = Monat
	             3 = Woche
	             4 = Tag -->
	        <INPUT name="LZZ" type="int"/>
	
	        <!-- In der Lohnsteuerkarte des Arbeitnehmers eingetragener Freibetrag für
	             den Lohnzahlungszeitraum in Cent -->
	        <INPUT name="LZZFREIB" type="BigDecimal"/>
	
	        <!-- In der Lohnsteuerkarte des Arbeitnehmers eingetragener Hinzurechnungsbetrag
	             für den Lohnzahlungszeitraum in Cent -->
	        <INPUT name="LZZHINZU" type="BigDecimal"/>
	
	        <!-- Dem Arbeitgeber mitgeteilte Zahlungen des Arbeitnehmers zur privaten
	             Kranken- bzw. Pflegeversicherung im Sinne des §10 Abs. 1 Nr. 3 EStG 2010
	             als Monatsbetrag in Cent (der Wert ist inabhängig vom Lohnzahlungszeitraum immer 
	             als Monatsbetrag anzugeben).-->
	        <INPUT name="PKPV" type="BigDecimal" default="new BigDecimal(0)"/>
	        
	        <!-- Krankenversicherung:
	             0 = gesetzlich krankenversicherte Arbeitnehmer
	             1 = ausschließlich privat krankenversicherte Arbeitnehmer OHNE Arbeitgeberzuschuss
	             2 = ausschließlich privat krankenversicherte Arbeitnehmer MIT Arbeitgeberzuschuss -->
	        <INPUT name="PKV" type="int" default="0"/>
	        
	        <!-- 1, wenn bei der sozialen Pflegeversicherung die Besonderheiten in Sachsen zu berücksichtigen sind bzw. 
	        	 	zu berücksichtigen wären, sonst 0. -->
	        <INPUT name="PVS" type="int" default="0"/>
	
	        <!-- 1, wenn er der Arbeitnehmer den Zuschlag zur sozialen Pflegeversicherung 
	        	 	zu zahlen hat, sonst 0. -->
	        <INPUT name="PVZ" type="int" default="0"/>
	        
	        <!-- Religionsgemeinschaft des Arbeitnehmers lt. Lohnsteuerkarte (bei
	             keiner Religionszugehoerigkeit = 0) -->
	        <INPUT name="R" type="int"/>
	
	        <!-- Steuerpflichtiger Arbeitslohn vor Beruecksichtigung der Freibetraege
	             fuer Versorgungsbezuege, des Altersentlastungsbetrags und des auf
	             der Lohnsteuerkarte fuer den Lohnzahlungszeitraum eingetragenen
	             Freibetrags in Cents. -->
	        <INPUT name="RE4" type="BigDecimal"/>
	
	        <!-- Sonstige Bezuege (ohne Verguetung aus mehrjaehriger Taetigkeit) einschliesslich
	             Sterbegeld bei Versorgungsbezuegen sowie Kapitalauszahlungen/Abfindungen,
	             soweit es sich nicht um Bezuege fuer mehrere Jahre handelt in Cents (ggf. 0) -->
	        <INPUT name="SONSTB" type="BigDecimal"/>
	
	        <!-- Sterbegeld bei Versorgungsbezuegen sowie Kapitalauszahlungen/Abfindungen,
	             soweit es sich nicht um Bezuege fuer mehrere Jahre handelt
	             (in SONSTB enthalten) in Cents -->
	        <INPUT name="STERBE" type="BigDecimal" regex_test="" regex_transform=""/>
	
	        <!-- Steuerklasse:
	             1 = I
	             2 = II
	             3 = III
	             4 = IV
	             5 = V
	             6 = VI -->
	        <INPUT name="STKL" type="int"/>
	
	        <!-- In RE4 enthaltene Versorgungsbezuege in Cents (ggf. 0) -->
	        <INPUT name="VBEZ" type="BigDecimal"/>
	
	        <!-- Vorsorgungsbezug im Januar 2005 bzw. fuer den ersten vollen Monat
	             in Cents-->
	        <INPUT name="VBEZM" type="BigDecimal"/>
	
	        <!-- Voraussichtliche Sonderzahlungen im Kalenderjahr des Versorgungsbeginns
	             bei Versorgungsempfaengern ohne Sterbegeld, Kapitalauszahlungen/Abfindungen
	             bei Versorgungsbezuegen in Cents-->
	        <INPUT name="VBEZS" type="BigDecimal"/>
	
	        <!-- In SONSTB enthaltene Versorgungsbezuege einschliesslich Sterbegeld
	            in Cents (ggf. 0) -->
	        <INPUT name="VBS" type="BigDecimal"/>
	
	        <!-- Jahr, in dem der Versorgungsbezug erstmalig gewaehrt wurde; werden
	             mehrere Versorgungsbezuege gezahlt, so gilt der aelteste erstmalige Bezug -->
	        <INPUT name="VJAHR" type="int" regex_test="" regex_transform=""/>
	
	        <!-- Kapitalauszahlungen / Abfindungen / Nachzahlungen bei Versorgungsbezügen 
	             für mehrere Jahre in Cent (ggf. 0) -->     
	        <INPUT name="VKAPA" type="BigDecimal" regex_test="" regex_transform=""/>
	 
			<!-- Vergütung für mehrjährige Tätigkeit ohne Kapitalauszahlungen und ohne Abfindungen 
				 bei Versorgungsbezügen in Cent (ggf. 0) -->
	        <INPUT name="VMT" type="BigDecimal" regex_test="" regex_transform=""/>
	
	        <!-- Zahl der Freibetraege fuer Kinder (eine Dezimalstelle, nur bei Steuerklassen
	             I, II, III und IV) -->
	        <INPUT name="ZKF" type="BigDecimal" regex_test="" regex_transform=""/>
	
	        <!-- Zahl der Monate, fuer die Versorgungsbezuege gezahlt werden (nur
	             erforderlich bei Jahresberechnung (LZZ = 1) -->
	        <INPUT name="ZMVB" type="int" regex_test="" regex_transform=""/>
	        
	        <!-- In JRE4 enthaltene Entschädigungen nach § 24 Nummer 1 EStG in Cent -->
	    	<INPUT name="JRE4ENT" type="BigDecimal" default="BigDecimal.ZERO"/>
	    	
	    	<!-- In SONSTB enthaltene Entschädigungen nach § 24 Nummer 1 EStG in Cent -->
	    	<INPUT name="SONSTENT" type="BigDecimal" default="BigDecimal.ZERO"/>
    	</INPUTS>

    	<!--  AUSGABEPARAMETER  -->
		<OUTPUTS type="STANDARD">
	        <!-- Bemessungsgrundlage fuer die Kirchenlohnsteuer in Cents -->
	        <OUTPUT name="BK" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Bemessungsgrundlage der sonstigen Einkuenfte (ohne Verguetung
	             fuer mehrjaehrige Taetigkeit) fuer die Kirchenlohnsteuer in Cents -->
	        <OUTPUT name="BKS" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <OUTPUT name="BKV" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Fuer den Lohnzahlungszeitraum einzubehaltende Lohnsteuer in Cents -->
	        <OUTPUT name="LSTLZZ" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Fuer den Lohnzahlungszeitraum einzubehaltender Solidaritaetszuschlag
	             in Cents -->
	        <OUTPUT name="SOLZLZZ" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Solidaritaetszuschlag fuer sonstige Bezuege (ohne Verguetung fuer mehrjaehrige
	             Taetigkeit) in Cents -->
	        <OUTPUT name="SOLZS" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Solidaritaetszuschlag fuer die Verguetung fuer mehrjaehrige Taetigkeit in
	             Cents -->
	        <OUTPUT name="SOLZV" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Lohnsteuer fuer sonstige Einkuenfte (ohne Verguetung fuer mehrjaehrige
	             Taetigkeit) in Cents -->
	        <OUTPUT name="STS" type="BigDecimal" default="new BigDecimal(0)"/>
	
	        <!-- Lohnsteuer fuer Verguetung fuer mehrjaehrige Taetigkeit in Cents -->
	        <OUTPUT name="STV" type="BigDecimal" default="new BigDecimal(0)"/>
	        
	        <!-- Für den Lohnzahlungszeitraum berücksichtigte Beiträge des Arbeitnehmers zur
				 privaten Basis-Krankenversicherung und privaten Pflege-Pflichtversicherung (ggf. auch
				 die Mindestvorsorgepauschale) in Cent beim laufenden Arbeitslohn. Für Zwecke der Lohn-
				 steuerbescheinigung sind die einzelnen Ausgabewerte außerhalb des eigentlichen Lohn-
				 steuerbescheinigungsprogramms zu addieren; hinzuzurechnen sind auch die Ausgabewerte
				 VKVSONST -->
			<OUTPUT name="VKVLZZ" type="BigDecimal" default="new BigDecimal(0)"/> 
			
			<!-- Für den Lohnzahlungszeitraum berücksichtigte Beiträge des Arbeitnehmers 
				 zur privaten Basis-Krankenversicherung und privaten Pflege-Pflichtversicherung (ggf. 
				 auch die Mindestvorsorgepauschale) in Cent bei sonstigen Bezügen. Der Ausgabewert kann
				 auch negativ sein. Für tarifermäßigt zu besteuernde Vergütungen für mehrjährige 
				 Tätigkeiten enthält der PAP keinen entsprechenden Ausgabewert. -->
			<OUTPUT name="VKVSONST" type="BigDecimal" default="new BigDecimal(0)"/> 
		
		</OUTPUTS>
		
		<!--  AUSGABEPARAMETER DBA  -->
		<OUTPUTS type="DBA">
		
			<!-- Verbrauchter Freibetrag bei Berechnung des laufenden Arbeitslohns, in Cent -->
			<OUTPUT name="VFRB" type="BigDecimal" default="new BigDecimal(0)"/> 
			
			<!-- Verbrauchter Freibetrag bei Berechnung des voraussichtlichen Jahresarbeitslohns, in Cent -->
			<OUTPUT name="VFRBS1" type="BigDecimal" default="new BigDecimal(0)"/> 
			
			<!-- Verbrauchter Freibetrag bei Berechnung der sonstigen Bezüge, in Cent -->
			<OUTPUT name="VFRBS2" type="BigDecimal" default="new BigDecimal(0)"/> 
			
			<!-- Für die weitergehende Berücksichtigung des Steuerfreibetrags nach dem DBA Türkei verfügbares ZVE über 
				dem Grundfreibetrag bei der Berechnung des laufenden Arbeitslohns, in Cent -->
			<OUTPUT name="WVFRB" type="BigDecimal" default="new BigDecimal(0)"/> 
			
			<!-- Für die weitergehende Berücksichtigung des Steuerfreibetrags nach dem DBA Türkei verfügbares ZVE über dem Grundfreibetrag 
				bei der Berechnung des voraussichtlichen Jahresarbeitslohns, in Cent -->
			<OUTPUT name="WVFRBO" type="BigDecimal" default="new BigDecimal(0)"/> 
			
			<!-- Für die weitergehende Berücksichtigung des Steuerfreibetrags nach dem DBA Türkei verfügbares ZVE 
				über dem Grundfreibetrag bei der Berechnung der sonstigen Bezüge, in Cent -->
			<OUTPUT name="WVFRBM" type="BigDecimal" default="new BigDecimal(0)"/> 
		</OUTPUTS>

	    <!--  INTERNE FELDER  -->
		<INTERNALS>
		        <!-- Altersentlastungsbetrag nach Alterseinkünftegesetz in €,
		             Cent (2 Dezimalstellen) -->
		        <INTERNAL name="ALTE" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Arbeitnehmer-Pauschbetrag in EURO -->
		        <INTERNAL name="ANP" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf den Lohnzahlungszeitraum entfallender Anteil von Jahreswerten
		             auf ganze Cents abgerundet -->
		        <INTERNAL name="ANTEIL1" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Bemessungsgrundlage für Altersentlastungsbetrag in €, Cent
		             (2 Dezimalstellen) -->
		        <INTERNAL name="BMG" type="BigDecimal" default="new BigDecimal(0)"/>
		        
		        <!-- Beitragsbemessungsgrenze in der gesetzlichen Krankenversicherung 
		        	und der sozialen Pflegeversicherung in Euro -->
		        <INTERNAL name="BBGKVPV" type="BigDecimal" default="new BigDecimal(0)"/>
		        
		        <!-- allgemeine Beitragsbemessungsgrenze in der allgemeinen Renten-versicherung in Euro -->
		        <INTERNAL name="BBGRV" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Differenz zwischen ST1 und ST2 in EURO -->
		        <INTERNAL name="DIFF" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Entlastungsbetrag fuer Alleinerziehende in EURO -->
		        <INTERNAL name="EFA" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Versorgungsfreibetrag in €, Cent (2 Dezimalstellen) -->
		        <INTERNAL name="FVB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Versorgungsfreibetrag in €, Cent (2 Dezimalstellen) für die Berechnung
		             der Lohnsteuer für den sonstigen Bezug -->
			    <INTERNAL name="FVBSO" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zuschlag zum Versorgungsfreibetrag in EURO -->
		        <INTERNAL name="FVBZ" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zuschlag zum Versorgungsfreibetrag in EURO fuer die Berechnung
		             der Lohnsteuer beim sonstigen Bezug -->
			    <INTERNAL name="FVBZSO" type="BigDecimal" default="new BigDecimal(0)"/>
		 
		     	<!-- Grundfreibetrag in Euro -->
		        <INTERNAL name="GFB" type="BigDecimal" default="new BigDecimal(0)"/>
		 
		        <!-- Maximaler Altersentlastungsbetrag in € -->
		        <INTERNAL name="HBALTE" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Massgeblicher maximaler Versorgungsfreibetrag in € -->
		        <INTERNAL name="HFVB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Massgeblicher maximaler Zuschlag zum Versorgungsfreibetrag in €,Cent
		             (2 Dezimalstellen) -->
		        <INTERNAL name="HFVBZ" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Massgeblicher maximaler Zuschlag zum Versorgungsfreibetrag in €, Cent
		             (2 Dezimalstellen) für die Berechnung der Lohnsteuer für den
		             sonstigen Bezug -->
		        <INTERNAL name="HFVBZSO" type="BigDecimal" default="new BigDecimal(0)"/>
				
		         <!-- Nummer der Tabellenwerte fuer Versorgungsparameter -->
		        <INTERNAL name="J" type="int" default="0"/>
		
		        <!-- Jahressteuer nach § 51a EStG, aus der Solidaritaetszuschlag und
		             Bemessungsgrundlage fuer die Kirchenlohnsteuer ermittelt werden in EURO -->
		        <INTERNAL name="JBMG" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechneter LZZFREIB in €, Cent
		             (2 Dezimalstellen) -->
		        <INTERNAL name="JLFREIB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechnete LZZHINZU in €, Cent
		             (2 Dezimalstellen) -->
		        <INTERNAL name="JLHINZU" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Jahreswert, dessen Anteil fuer einen Lohnzahlungszeitraum in
		             UPANTEIL errechnet werden soll in Cents -->
		        <INTERNAL name="JW" type="BigDecimal" default="new BigDecimal(0)"/>
		        
		        <!-- Nummer der Tabellenwerte fuer Parameter bei Altersentlastungsbetrag -->
		        <INTERNAL name="K" type="int" default="0"/>
		
		        <!-- Merker für Berechnung Lohnsteuer für mehrjährige Tätigkeit.
					 0 = normale Steuerberechnung
					 1 = Steuerberechnung für mehrjährige Tätigkeit
					 2 = entfällt -->     
		        <INTERNAL name="KENNVMT" type="int" default="0"/>
		 
		        <!-- Summe der Freibetraege fuer Kinder in EURO -->
		        <INTERNAL name="KFB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Beitragssatz des Arbeitgebers zur Krankenversicherung -->
		        <INTERNAL name="KVSATZAG" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Beitragssatz des Arbeitnehmers zur Krankenversicherung -->
		        <INTERNAL name="KVSATZAN" type="BigDecimal" default="new BigDecimal(0)"/>
		
		       <!-- Kennzahl fuer die Einkommensteuer-Tabellenart:
		             1 = Grundtabelle
		             2 = Splittingtabelle -->
		        <INTERNAL name="KZTAB" type="int" default="0"/>
		
		        <!-- Jahreslohnsteuer in EURO -->
		        <INTERNAL name="LSTJAHR" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zwischenfelder der Jahreslohnsteuer in Cent -->
		        <INTERNAL name="LST1" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="LST2" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="LST3" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="LSTOSO" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="LSTSO" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Mindeststeuer fuer die Steuerklassen V und VI in EURO -->
		        <INTERNAL name="MIST" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Beitragssatz des Arbeitgebers zur Pflegeversicherung -->
		        <INTERNAL name="PVSATZAG" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Beitragssatz des Arbeitnehmers zur Pflegeversicherung -->
		        <INTERNAL name="PVSATZAN" type="BigDecimal" default="new BigDecimal(0)"/>
		
				<!-- Beitragssatz des Arbeitnehmers in der allgemeinen gesetzlichen Rentenversicherung (4 Dezimalstellen)  -->
			    <INTERNAL name="RVSATZAN" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Rechenwert in Gleitkommadarstellung -->
		        <INTERNAL name="RW" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Sonderausgaben-Pauschbetrag in EURO -->
		        <INTERNAL name="SAP" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Freigrenze fuer den Solidaritaetszuschlag in EURO -->
		        <INTERNAL name="SOLZFREI" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Solidaritaetszuschlag auf die Jahreslohnsteuer in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="SOLZJ" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zwischenwert fuer den Solidaritaetszuschlag auf die Jahreslohnsteuer
		             in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="SOLZMIN" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Tarifliche Einkommensteuer in EURO -->
		        <INTERNAL name="ST" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Tarifliche Einkommensteuer auf das 1,25-fache ZX in EURO -->
		        <INTERNAL name="ST1" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Tarifliche Einkommensteuer auf das 0,75-fache ZX in EURO -->
		        <INTERNAL name="ST2" type="BigDecimal" default="new BigDecimal(0)"/>
		 
				<!-- Zwischenfeld zur Ermittlung der Steuer auf Vergütungen für mehrjährige Tätigkeit -->
		        <INTERNAL name="STOVMT" type="BigDecimal" default="new BigDecimal(0)"/>
		        
		        <!-- Teilbetragssatz der Vorsorgepauschale für die Rentenversicherung (2 Dezimalstellen) -->
		        <INTERNAL name="TBSVORV" type="BigDecimal" default="new BigDecimal(0)"/>
		 
		        <!-- Bemessungsgrundlage fuer den Versorgungsfreibetrag in Cents -->
		        <INTERNAL name="VBEZB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Bemessungsgrundlage für den Versorgungsfreibetrag in Cent für
		             den sonstigen Bezug -->
		        <INTERNAL name="VBEZBSO" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Hoechstbetrag der Vorsorgepauschale nach Alterseinkuenftegesetz in EURO, C -->
		        <INTERNAL name="VHB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Vorsorgepauschale in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="VSP" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Vorsorgepauschale nach Alterseinkuenftegesetz in EURO, C -->
		        <INTERNAL name="VSPN" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zwischenwert 1 bei der Berechnung der Vorsorgepauschale nach
		             dem Alterseinkuenftegesetz in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="VSP1" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zwischenwert 2 bei der Berechnung der Vorsorgepauschale nach
		             dem Alterseinkuenftegesetz in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="VSP2" type="BigDecimal" default="new BigDecimal(0)"/>
				
				<!-- Vorsorgepauschale mit Teilbeträgen für die gesetzliche Kranken- und 
					 soziale Pflegeversicherung nach fiktiven Beträgen oder ggf. für die
					 private Basiskrankenversicherung und private Pflege-Pflichtversicherung 
					 in Euro, Cent (2 Dezimalstellen) -->
		        <INTERNAL name="VSP3" type="BigDecimal" default="new BigDecimal(0)"/>
		        
		        <!-- Erster Grenzwert in Steuerklasse V/VI in Euro -->
		        <INTERNAL name="W1STKL5" type="BigDecimal" default="new BigDecimal(0)"/> 
		        
		        <!-- Zweiter Grenzwert in Steuerklasse V/VI in Euro -->
		        <INTERNAL name="W2STKL5" type="BigDecimal" default="new BigDecimal(0)"/> 
		        
		        <!-- Dritter Grenzwert in Steuerklasse V/VI in Euro -->
		        <INTERNAL name="W3STKL5" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Hoechstbetrag der Vorsorgepauschale nach § 10c Abs. 2 Nr. 2 EStG in EURO -->
		        <INTERNAL name="VSPMAX1" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Hoechstbetrag der Vorsorgepauschale nach § 10c Abs. 2 Nr. 3 EStG in EURO -->
		        <INTERNAL name="VSPMAX2" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Vorsorgepauschale nach § 10c Abs. 2 Satz 2 EStG vor der Hoechstbetragsberechnung
		             in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="VSPO" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Fuer den Abzug nach § 10c Abs. 2 Nrn. 2 und 3 EStG verbleibender
		             Rest von VSPO in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="VSPREST" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Hoechstbetrag der Vorsorgepauschale nach § 10c Abs. 2 Nr. 1 EStG
		             in EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="VSPVOR" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zu versteuerndes Einkommen gem. § 32a Abs. 1 und 2 EStG €, C
		             (2 Dezimalstellen) -->
		        <INTERNAL name="X" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- gem. § 32a Abs. 1 EStG (6 Dezimalstellen) -->
		        <INTERNAL name="Y" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechnetes RE4 in €, C (2 Dezimalstellen)
		             nach Abzug der Freibeträge nach § 39 b Abs. 2 Satz 3 und 4. -->
		        <INTERNAL name="ZRE4" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechnetes RE4 in €, C (2 Dezimalstellen) -->
		        <INTERNAL name="ZRE4J" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechnetes RE4 in €, C (2 Dezimalstellen)
		             nach Abzug des Versorgungsfreibetrags und des Alterentlastungsbetrags
		             zur Berechnung der Vorsorgepauschale in €, Cent (2 Dezimalstellen) -->
		        <INTERNAL name="ZRE4VP" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Feste Tabellenfreibeträge (ohne Vorsorgepauschale) in €, Cent
		             (2 Dezimalstellen) -->
		        <INTERNAL name="ZTABFB" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechnetes (VBEZ abzueglich FVB) in
		             EURO, C (2 Dezimalstellen) -->
		        <INTERNAL name="ZVBEZ" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Auf einen Jahreslohn hochgerechnetes VBEZ in €, C (2 Dezimalstellen) -->
		        <INTERNAL name="ZVBEZJ" type="BigDecimal" default="new BigDecimal(0)"/>
		
		        <!-- Zu versteuerndes Einkommen in €, C (2 Dezimalstellen) -->
		        <INTERNAL name="ZVE" type="BigDecimal" default="new BigDecimal(0)"/>
		        
		        <!-- Zwischenfelder zu X fuer die Berechnung der Steuer nach § 39b
		             Abs. 2 Satz 7 EStG in € -->
		        <INTERNAL name="ZX" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="ZZX" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="HOCH" type="BigDecimal" default="new BigDecimal(0)"/>
		        <INTERNAL name="VERGL" type="BigDecimal" default="new BigDecimal(0)"/>
				
				 <!-- Jahreswert der berücksichtigten Beiträge zur privaten Basis-Krankenversicherung und 
					  privaten Pflege-Pflichtversicherung (ggf. auch die Mindestvorsorgepauschale) in Cent. -->
		        <INTERNAL name="VKV" type="BigDecimal" default="new BigDecimal(0)"/>
			</INTERNALS>
    </VARIABLES>

    <CONSTANTS>
        <!-- Tabelle fuer die Vomhundertsaetze des Versorgungsfreibetrags -->
        <CONSTANT name="TAB1" type="BigDecimal[]" 
        	value="{BigDecimal.valueOf (0.0), BigDecimal.valueOf (0.4), BigDecimal.valueOf (0.384), BigDecimal.valueOf (0.368),
        	        BigDecimal.valueOf (0.352), BigDecimal.valueOf (0.336), BigDecimal.valueOf (0.32), BigDecimal.valueOf (0.304),
        	        BigDecimal.valueOf (0.288), BigDecimal.valueOf (0.272), BigDecimal.valueOf (0.256), BigDecimal.valueOf (0.24), 
        	        BigDecimal.valueOf (0.224), BigDecimal.valueOf (0.208), BigDecimal.valueOf (0.192), BigDecimal.valueOf (0.176),
        	        BigDecimal.valueOf (0.16), BigDecimal.valueOf (0.152),  BigDecimal.valueOf (0.144), BigDecimal.valueOf (0.136),
        	        BigDecimal.valueOf (0.128), BigDecimal.valueOf (0.12),  BigDecimal.valueOf (0.112), BigDecimal.valueOf (0.104),
        	        BigDecimal.valueOf (0.096), BigDecimal.valueOf (0.088), BigDecimal.valueOf (0.08), BigDecimal.valueOf (0.072),
        	        BigDecimal.valueOf (0.064), BigDecimal.valueOf (0.056), BigDecimal.valueOf (0.048), BigDecimal.valueOf (0.04),
        	        BigDecimal.valueOf (0.032), BigDecimal.valueOf (0.024), BigDecimal.valueOf (0.016), BigDecimal.valueOf (0.008),
        	        BigDecimal.valueOf (0.0)}"/>

        <!-- Tabelle fuer die Hoechstbetrage des Versorgungsfreibetrags -->
        <CONSTANT name="TAB2" type="BigDecimal[]" value="{BigDecimal.valueOf (0), BigDecimal.valueOf (3000), BigDecimal.valueOf (2880),
        			BigDecimal.valueOf (2760), BigDecimal.valueOf (2640), BigDecimal.valueOf (2520), BigDecimal.valueOf (2400), 
        			BigDecimal.valueOf (2280), BigDecimal.valueOf (2160), BigDecimal.valueOf (2040), BigDecimal.valueOf (1920), 
        			BigDecimal.valueOf (1800), BigDecimal.valueOf (1680), BigDecimal.valueOf (1560), BigDecimal.valueOf (1440), 
        			BigDecimal.valueOf (1320), BigDecimal.valueOf (1200), BigDecimal.valueOf (1140), BigDecimal.valueOf (1080), 
        			BigDecimal.valueOf (1020), BigDecimal.valueOf (960), BigDecimal.valueOf (900), BigDecimal.valueOf (840), 
        			BigDecimal.valueOf (780),  BigDecimal.valueOf (720), BigDecimal.valueOf (660), BigDecimal.valueOf (600), 
        			BigDecimal.valueOf (540),  BigDecimal.valueOf (480), BigDecimal.valueOf (420), BigDecimal.valueOf (360), 
        			BigDecimal.valueOf (300),  BigDecimal.valueOf (240), BigDecimal.valueOf (180), BigDecimal.valueOf (120), 
        			BigDecimal.valueOf (60),   BigDecimal.valueOf (0)}"/>

        <!-- Tabelle fuer die Zuschlaege zum Versorgungsfreibetrag -->
        <CONSTANT name="TAB3" type="BigDecimal[]" value="{BigDecimal.valueOf (0), BigDecimal.valueOf (900), BigDecimal.valueOf (864), 
        	BigDecimal.valueOf (828), BigDecimal.valueOf (792), BigDecimal.valueOf (756), BigDecimal.valueOf (720), 
        	BigDecimal.valueOf (684), BigDecimal.valueOf (648), BigDecimal.valueOf (612), BigDecimal.valueOf (576), 
        	BigDecimal.valueOf (540), BigDecimal.valueOf (504), BigDecimal.valueOf (468), BigDecimal.valueOf (432), 
        	BigDecimal.valueOf (396), BigDecimal.valueOf (360), BigDecimal.valueOf (342), BigDecimal.valueOf (324), 
        	BigDecimal.valueOf (306), BigDecimal.valueOf (288), BigDecimal.valueOf (270), BigDecimal.valueOf (252), 
        	BigDecimal.valueOf (234), BigDecimal.valueOf (216), BigDecimal.valueOf (198), BigDecimal.valueOf (180), 
        	BigDecimal.valueOf (162), BigDecimal.valueOf (144), BigDecimal.valueOf (126), BigDecimal.valueOf (108), 
        	BigDecimal.valueOf (90),  BigDecimal.valueOf (72), BigDecimal.valueOf (54), BigDecimal.valueOf (36), 
        	BigDecimal.valueOf (18),  BigDecimal.valueOf (0)}"/>

        <!-- Tabelle fuer die Vomhundertsaetze des Altersentlastungsbetrags -->
        <CONSTANT name="TAB4" type="BigDecimal[]" value="{BigDecimal.valueOf (0.0), BigDecimal.valueOf (0.4), BigDecimal.valueOf (0.384),
        	 BigDecimal.valueOf (0.368), BigDecimal.valueOf (0.352), BigDecimal.valueOf (0.336), BigDecimal.valueOf (0.32), 
        	 BigDecimal.valueOf (0.304), BigDecimal.valueOf (0.288), BigDecimal.valueOf (0.272), BigDecimal.valueOf (0.256), 
        	 BigDecimal.valueOf (0.24),  BigDecimal.valueOf (0.224), BigDecimal.valueOf (0.208), BigDecimal.valueOf (0.192), 
        	 BigDecimal.valueOf (0.176), BigDecimal.valueOf (0.16), BigDecimal.valueOf (0.152),  BigDecimal.valueOf (0.144), 
        	 BigDecimal.valueOf (0.136), BigDecimal.valueOf (0.128), BigDecimal.valueOf (0.12),  BigDecimal.valueOf (0.112), 
        	 BigDecimal.valueOf (0.104), BigDecimal.valueOf (0.096), BigDecimal.valueOf (0.088), BigDecimal.valueOf (0.08), 
        	 BigDecimal.valueOf (0.072), BigDecimal.valueOf (0.064), BigDecimal.valueOf (0.056), BigDecimal.valueOf (0.048), 
        	 BigDecimal.valueOf (0.04),  BigDecimal.valueOf (0.032), BigDecimal.valueOf (0.024), BigDecimal.valueOf (0.016), 
        	 BigDecimal.valueOf (0.008), BigDecimal.valueOf (0.0)}"/>

        <!-- Tabelle fuer die Hoechstbetraege des Altersentlastungsbetrags -->
        <CONSTANT name="TAB5" type="BigDecimal[]" value="{BigDecimal.valueOf (0), BigDecimal.valueOf (1900), BigDecimal.valueOf (1824), 
        	BigDecimal.valueOf (1748), BigDecimal.valueOf (1672), BigDecimal.valueOf (1596), BigDecimal.valueOf (1520), 
        	BigDecimal.valueOf (1444), BigDecimal.valueOf (1368), BigDecimal.valueOf (1292), BigDecimal.valueOf (1216), 
        	BigDecimal.valueOf (1140), BigDecimal.valueOf (1064), BigDecimal.valueOf (988),  BigDecimal.valueOf (912), 
        	BigDecimal.valueOf (836),  BigDecimal.valueOf (760), BigDecimal.valueOf (722), BigDecimal.valueOf (684), 
        	BigDecimal.valueOf (646),  BigDecimal.valueOf (608), BigDecimal.valueOf (570), BigDecimal.valueOf (532), 
        	BigDecimal.valueOf (494),  BigDecimal.valueOf (456), BigDecimal.valueOf (418), BigDecimal.valueOf (380), 
        	BigDecimal.valueOf (342),  BigDecimal.valueOf (304), BigDecimal.valueOf (266), BigDecimal.valueOf (228), 
        	BigDecimal.valueOf (190),  BigDecimal.valueOf (152), BigDecimal.valueOf (114), BigDecimal.valueOf (76), 
        	BigDecimal.valueOf (38),   BigDecimal.valueOf (0)}"/>
 
        <!-- Zahlenkonstanten fuer im Plan oft genutzte BigDecimal Werte -->
        <CONSTANT name="ZAHL1" 		type="BigDecimal" value="BigDecimal.ONE"/>
        <CONSTANT name="ZAHL2" 		type="BigDecimal" value="new BigDecimal(2)"/>
        <CONSTANT name="ZAHL5" 		type="BigDecimal" value="new BigDecimal(5)"/>
        <CONSTANT name="ZAHL7" 		type="BigDecimal" value="new BigDecimal(7)"/>
        <CONSTANT name="ZAHL12" 	type="BigDecimal" value="new BigDecimal(12)"/>
        <CONSTANT name="ZAHL100" 	type="BigDecimal" value="new BigDecimal(100)"/>
        <CONSTANT name="ZAHL360" 	type="BigDecimal" value="new BigDecimal(360)"/>
        <CONSTANT name="ZAHL500" 	type="BigDecimal" value="new BigDecimal(500)"/>
        <CONSTANT name="ZAHL700" 	type="BigDecimal" value="new BigDecimal(700)"/>
        <CONSTANT name="ZAHL1000" 	type="BigDecimal" value="new BigDecimal(1000)"/>
        <CONSTANT name="ZAHL10000" 	type="BigDecimal" value="new BigDecimal(10000)"/>

    </CONSTANTS>

    <METHODS>



  <!-- PROGRAMMABLAUFPLAN, PAP Seite 13 -->
  <MAIN>
  	<EXECUTE method="MPARA"/> 
    <EXECUTE method="MRE4JL"/>
    <EVAL exec="VBEZBSO= BigDecimal.ZERO"/>
    <EVAL exec="KENNVMT= 0"/>
    
    
    <EXECUTE method="MRE4"/>
    <EXECUTE method="MRE4ABZ"/>
    <EXECUTE method="MBERECH"/>

    
    <EXECUTE method="MSONST"/>
    <EXECUTE method="MVMT"/>
  </MAIN>

  <!-- Zuweisung von Werten für bestimmte Sozialversicherungsparameter  PAP Seite 14 -->
  <METHOD name="MPARA">
  	 <IF expr="KRV &lt; 2"><!-- &lt; = < -->
      	<THEN>
	        <IF expr="KRV == 0">
	      		<THEN>
	      			<EVAL exec="BBGRV = new BigDecimal(78000)"/>  <!-- Neu 2018 -->
	      		</THEN>
	      		<ELSE>
	        		<EVAL exec="BBGRV = new BigDecimal(69600)"/>  <!-- Neu 2018 -->
	      		</ELSE>
      		</IF>
      		<EVAL exec="RVSATZAN = BigDecimal.valueOf(0.093)"/> <!-- Neu 2018 -->
      		<EVAL exec="TBSVORV = BigDecimal.valueOf(0.72)"/>  <!-- Neu 2018 -->
      	</THEN>
      	<ELSE>
        	<!-- Nichts zu tun -->
     	</ELSE>
     </IF>
       
       	<EVAL exec="BBGKVPV = new BigDecimal(53100)"/> <!-- Neu 2018 -->
      	<EVAL exec="KVSATZAN = (KVZ.divide(ZAHL100)).add(BigDecimal.valueOf(0.07))"/>
      	<EVAL exec="KVSATZAG = BigDecimal.valueOf(0.07)"/>
      	
      	<IF expr="PVS == 1">
      		<THEN>
      			<EVAL exec="PVSATZAN = BigDecimal.valueOf(0.01775)"/> 
      			<EVAL exec="PVSATZAG = BigDecimal.valueOf(0.00775)"/> 
      		</THEN>
      		<ELSE>
        		<EVAL exec="PVSATZAN =  BigDecimal.valueOf(0.01275)"/> 
        		<EVAL exec="PVSATZAG =  BigDecimal.valueOf(0.01275)"/> 
      		</ELSE>
      	</IF>
      	<IF expr="PVZ == 1">
      		<THEN>
      			<EVAL exec="PVSATZAN = PVSATZAN.add(BigDecimal.valueOf(0.0025))"/>
      		</THEN>
      	</IF>
      	
      	 <!-- Anfang Neu 2018 --> 
      	 <EVAL exec="W1STKL5 = new BigDecimal(10440)"/>
      	 <EVAL exec="W2STKL5 = new BigDecimal(27475)"/>
      	 <EVAL exec="W3STKL5 = new BigDecimal(208426)"/>
      	 <EVAL exec="GFB = new BigDecimal(9000)"/>
      	  <!-- Ende Neu 2018 -->
      	 <EVAL exec="SOLZFREI = new BigDecimal(972)"/>
     
  </METHOD>

  <!-- Ermittlung des Jahresarbeitslohns nach § 39 b Abs. 2 Satz 2 EStG, PAP Seite 15 -->
  <METHOD name="MRE4JL">
    <IF expr="LZZ == 1">
      <THEN>
        <EVAL exec="ZRE4J= RE4.divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="ZVBEZJ= VBEZ.divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="JLFREIB= LZZFREIB.divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="JLHINZU= LZZHINZU.divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
      </THEN>
      <ELSE>
        <IF expr="LZZ == 2">
          <THEN>
            <EVAL exec="ZRE4J= (RE4.multiply (ZAHL12)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
            <EVAL exec="ZVBEZJ= (VBEZ.multiply (ZAHL12)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
            <EVAL exec="JLFREIB= (LZZFREIB.multiply (ZAHL12)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
            <EVAL exec="JLHINZU= (LZZHINZU.multiply (ZAHL12)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
          </THEN>
          <ELSE>
            <IF expr="LZZ == 3">
              <THEN>
                <EVAL exec="ZRE4J= (RE4.multiply (ZAHL360)).divide (ZAHL700, 2, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="ZVBEZJ= (VBEZ.multiply (ZAHL360)).divide (ZAHL700, 2, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="JLFREIB= (LZZFREIB.multiply (ZAHL360)).divide (ZAHL700, 2, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="JLHINZU= (LZZHINZU.multiply (ZAHL360)).divide (ZAHL700, 2, BigDecimal.ROUND_DOWN)"/>
              </THEN>
              <ELSE>
                <EVAL exec="ZRE4J= (RE4.multiply (ZAHL360)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="ZVBEZJ= (VBEZ.multiply (ZAHL360)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="JLFREIB= (LZZFREIB.multiply (ZAHL360)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="JLHINZU= (LZZHINZU.multiply (ZAHL360)).divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
              </ELSE>
            </IF>
          </ELSE>
        </IF>
      </ELSE>
    </IF>
    <IF expr="af == 0">
		<THEN>
			<EVAL exec="f= 1"/>
		</THEN>
    </IF>
  </METHOD>

  <!-- Freibeträge für Versorgungsbezüge, Altersentlastungsbetrag (§ 39b Abs. 2 Satz 3 EStG), PAP Seite 16 -->
  <METHOD name="MRE4">
    <IF expr="ZVBEZJ.compareTo (BigDecimal.ZERO) == 0">
      <THEN>
        <EVAL exec="FVBZ= BigDecimal.ZERO"/>
        <EVAL exec="FVB= BigDecimal.ZERO"/>
        <EVAL exec="FVBZSO= BigDecimal.ZERO"/>
        <EVAL exec="FVBSO= BigDecimal.ZERO"/>
      </THEN>
      <ELSE>
        <IF expr="VJAHR &lt; 2006">
          <THEN>
            <EVAL exec="J= 1"/>
          </THEN>
          <ELSE>
            <IF expr="VJAHR &lt; 2040">
              <THEN>
                <EVAL exec="J= VJAHR - 2004"/>
              </THEN>
              <ELSE>
                <EVAL exec="J= 36"/>
              </ELSE>
            </IF>
          </ELSE>
        </IF>
        <IF expr="LZZ == 1">
          <THEN>
            <EVAL exec="VBEZB= (VBEZM.multiply (BigDecimal.valueOf (ZMVB))).add (VBEZS)"/>
            <EVAL exec="HFVB= TAB2[J].divide (ZAHL12).multiply (BigDecimal.valueOf (ZMVB))"/>
            <EVAL exec="FVBZ= TAB3[J].divide (ZAHL12).multiply (BigDecimal.valueOf (ZMVB)).setScale (0, BigDecimal.ROUND_UP)"/>
          </THEN> 
          <ELSE>
            <EVAL exec="VBEZB= ((VBEZM.multiply (ZAHL12)).add (VBEZS)).setScale (2, BigDecimal.ROUND_DOWN)"/>
            <EVAL exec="HFVB= TAB2[J]"/>
            <EVAL exec="FVBZ= TAB3[J]"/>
          </ELSE>
        </IF>
        <EVAL exec="FVB= ((VBEZB.multiply (TAB1[J]))).divide (ZAHL100).setScale (2, BigDecimal.ROUND_UP)"/>
        <IF expr="FVB.compareTo (HFVB) == 1">
          <THEN>
            <EVAL exec="FVB = HFVB"/>
          </THEN>
        </IF>
        
        <IF expr="FVB.compareTo (ZVBEZJ) == 1">
          <THEN>
            <EVAL exec="FVB = ZVBEZJ"/>
          </THEN>
        </IF>
        
        <EVAL exec="FVBSO= (FVB.add((VBEZBSO.multiply (TAB1[J])).divide (ZAHL100))).setScale (2, BigDecimal.ROUND_UP)"/>
        <IF expr="FVBSO.compareTo (TAB2[J]) == 1">
          <THEN>
            <EVAL exec="FVBSO = TAB2[J]"/>
          </THEN> 
        </IF>
        <EVAL exec="HFVBZSO= (((VBEZB.add(VBEZBSO)).divide (ZAHL100)).subtract (FVBSO)).setScale (2, BigDecimal.ROUND_DOWN)"/>        
        <EVAL exec="FVBZSO= (FVBZ.add((VBEZBSO).divide (ZAHL100))).setScale (0, BigDecimal.ROUND_UP)"/>
        <IF expr="FVBZSO.compareTo (HFVBZSO) == 1">
          <THEN>
            <EVAL exec="FVBZSO = HFVBZSO.setScale(0, BigDecimal.ROUND_UP)"/>
          </THEN>
        </IF>
        <IF expr="FVBZSO.compareTo (TAB3[J]) == 1">
          <THEN>
            <EVAL exec="FVBZSO = TAB3[J]"/>
          </THEN>
        </IF> 
        <EVAL exec="HFVBZ= ((VBEZB.divide (ZAHL100)).subtract (FVB)).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <IF expr="FVBZ.compareTo (HFVBZ) == 1">
          <THEN>
            <EVAL exec="FVBZ = HFVBZ.setScale (0, BigDecimal.ROUND_UP)"/>
          </THEN>
        </IF>
      </ELSE>
    </IF>
    <EXECUTE method="MRE4ALTE"/>
  </METHOD>

  <!-- Altersentlastungsbetrag (§ 39b Abs. 2 Satz 3 EStG), PAP Seite 17 -->
  <METHOD name="MRE4ALTE">
    <IF expr="ALTER1 == 0">
      <THEN>
        <EVAL exec="ALTE= BigDecimal.ZERO"/>
      </THEN>
      <ELSE>
        <IF expr="AJAHR &lt; 2006">
          <THEN>
            <EVAL exec="K= 1"/>
          </THEN>
          <ELSE>
            <IF expr="AJAHR &lt; 2040">
              <THEN>
                <EVAL exec="K= AJAHR - 2004"/>
              </THEN>
              <ELSE>
                <EVAL exec="K= 36"/>
              </ELSE>
            </IF>
          </ELSE>
        </IF>
        <EVAL exec="BMG= ZRE4J.subtract (ZVBEZJ)"/>
        <!-- Lt. PAP muss hier auf ganze EUR gerundet werden -->
        <EVAL exec="ALTE = (BMG.multiply(TAB4[K])).setScale(0, BigDecimal.ROUND_UP)"/>
        <EVAL exec="HBALTE= TAB5[K]"/>
        <IF expr="ALTE.compareTo (HBALTE) == 1">
          <THEN>
            <EVAL exec="ALTE= HBALTE"/>
          </THEN>
        </IF>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Ermittlung des Jahresarbeitslohns nach Abzug der Freibeträge nach § 39 b Abs. 2 Satz 3 und 4 EStG, PAP Seite 19 -->
  <METHOD name="MRE4ABZ"> 
  	<EVAL exec="ZRE4= (ZRE4J.subtract (FVB).subtract   (ALTE).subtract (JLFREIB).add (JLHINZU)).setScale (2, BigDecimal.ROUND_DOWN)"/>
  	<IF expr="ZRE4.compareTo (BigDecimal.ZERO) == -1"> 
  		<THEN> 
  			<EVAL exec="ZRE4= BigDecimal.ZERO"/> 
  		</THEN> 
  	</IF> 
  	<EVAL exec="ZRE4VP= ZRE4J"/>

  	<IF expr="KENNVMT == 2"> 
  		<THEN> 
  				<EVAL exec="ZRE4VP = ZRE4VP.subtract(ENTSCH.divide(ZAHL100)).setScale(2,BigDecimal.ROUND_DOWN)"/> 
  		</THEN> 
  	</IF>

    <EVAL exec="ZVBEZ = ZVBEZJ.subtract(FVB).setScale(2, BigDecimal.ROUND_DOWN)"/>

    <IF expr="ZVBEZ.compareTo(BigDecimal.ZERO) == -1"> 
    	<THEN> 
    		<EVAL exec="ZVBEZ = BigDecimal.ZERO"/> 
    	</THEN> 
    </IF> 
  </METHOD>

  <!-- Berechnung fuer laufende Lohnzahlungszeitraueme Seite 20-->
  <METHOD name="MBERECH"> 

    <EXECUTE method="MZTABFB"/> 
    <EVAL exec="VFRB = ((ANP.add(FVB.add(FVBZ))).multiply(ZAHL100)).setScale(0, BigDecimal.ROUND_DOWN)"/>
    <EXECUTE method="MLSTJAHR"/>
    
    <EVAL exec="WVFRB = ((ZVE.subtract(GFB)).multiply(ZAHL100)).setScale(0, BigDecimal.ROUND_DOWN)"/> 
    <IF expr="WVFRB.compareTo(BigDecimal.ZERO) == -1">  <!-- WVFRB < 0 -->
    	<THEN> 
    		<EVAL exec="WVFRB = BigDecimal.valueOf(0)"/> 
    	</THEN> 
    </IF> 
    
    
	<EVAL exec="LSTJAHR = (ST.multiply(BigDecimal.valueOf(f))).setScale(0,BigDecimal.ROUND_DOWN)"/> 
	<EXECUTE method="UPLSTLZZ"/>
	<EXECUTE method="UPVKVLZZ"/>
	   	
	 <IF expr="ZKF.compareTo(BigDecimal.ZERO) == 1">  <!-- ZKF > 0 -->
	    <THEN> 
	    	  <EVAL exec="ZTABFB = ZTABFB.add(KFB)"/> 
	    	  <EXECUTE method="MRE4ABZ"/>
	    	  <EXECUTE method="MLSTJAHR"/>
	    	  <EVAL exec="JBMG = (ST.multiply(BigDecimal.valueOf(f))).setScale(0,BigDecimal.ROUND_DOWN)"/> 
	    </THEN> 
	    <ELSE>
	          <EVAL exec="JBMG = LSTJAHR"/> 
	    </ELSE>
	  </IF> 
	  
	  <EXECUTE method="MSOLZ"/>
	    
  </METHOD>

<!-- Ermittlung der festen Tabellenfreibeträge (ohne Vorsorgepauschale), PAP Seite 21 -->
  <METHOD name="MZTABFB"> 
    <EVAL exec="ANP= BigDecimal.ZERO"/>
    <IF expr="ZVBEZ.compareTo (BigDecimal.ZERO) &gt;= 0 &amp;&amp; ZVBEZ.compareTo(FVBZ) == -1">
      <THEN>
        <EVAL exec="FVBZ = BigDecimal.valueOf(ZVBEZ.longValue())"/>
      </THEN>
    </IF>
    <IF expr="STKL &lt; 6">
      <THEN>
        <IF expr="ZVBEZ.compareTo (BigDecimal.ZERO) == 1">
          <THEN>
            <IF expr="(ZVBEZ.subtract (FVBZ)).compareTo (BigDecimal.valueOf (102)) == -1">
              <THEN>
                <EVAL exec="ANP= (ZVBEZ.subtract (FVBZ)).setScale (0, BigDecimal.ROUND_UP)"/>
              </THEN>
              <ELSE>
                <EVAL exec="ANP= BigDecimal.valueOf (102)"/>
              </ELSE>
            </IF>
          </THEN>
        </IF>
      </THEN>
      <ELSE>
      	<EVAL exec="FVBZ= BigDecimal.valueOf (0)"/>
      	<EVAL exec="FVBZSO= BigDecimal.valueOf (0)"/>
      </ELSE>
    </IF>
    <IF expr="STKL &lt; 6">
      <THEN>
      	<IF expr="ZRE4.compareTo(ZVBEZ) == 1">
        	<THEN>
	        	<IF expr="ZRE4.subtract(ZVBEZ).compareTo(ZAHL1000) == -1">
		        	<THEN>
		        		<EVAL exec="ANP = ANP.add(ZRE4).subtract(ZVBEZ).setScale(0,BigDecimal.ROUND_UP)"/>
		        	</THEN>
	        		<ELSE>
	        			<EVAL exec="ANP = ANP.add(ZAHL1000)"/>
	        		</ELSE>
	        	</IF>
        	</THEN>
        </IF>
      </THEN>
    </IF>
    <EVAL exec="KZTAB= 1"/>
    <IF expr="STKL == 1">
      <THEN>
        <EVAL exec="SAP= BigDecimal.valueOf (36)"/>
        <EVAL exec="KFB= (ZKF.multiply (BigDecimal.valueOf (7428))).setScale (0, BigDecimal.ROUND_DOWN)"/> 
      </THEN>
	  <ELSE>
			<IF expr="STKL == 2">
			    <THEN>
			        <EVAL exec="EFA= BigDecimal.valueOf (1908)"/>
			        <EVAL exec="SAP= BigDecimal.valueOf (36)"/>
			        <EVAL exec="KFB= (ZKF.multiply (BigDecimal.valueOf (7428))).setScale (0, BigDecimal.ROUND_DOWN)"/>
			    </THEN>
		 
		    	<ELSE>
					<IF expr="STKL == 3">
					    <THEN>
					        <EVAL exec="KZTAB= 2"/>
					        <EVAL exec="SAP= BigDecimal.valueOf (36)"/>
					        <EVAL exec="KFB= (ZKF.multiply (BigDecimal.valueOf (7428))).setScale (0, BigDecimal.ROUND_DOWN)"/>
					    </THEN>
					
						<ELSE>
						  	<IF expr="STKL == 4">
						      <THEN>
						        <EVAL exec="SAP= BigDecimal.valueOf (36)"/>
						        <EVAL exec="KFB= (ZKF.multiply (BigDecimal.valueOf (3714))).setScale (0, BigDecimal.ROUND_DOWN)"/>
						      </THEN> 
								
							  <ELSE>
								  	<IF expr="STKL == 5">
								      <THEN>
								        <EVAL exec="SAP= BigDecimal.valueOf (36)"/>
								        <EVAL exec="KFB= BigDecimal.ZERO"/>
								      </THEN> 
										
									  <ELSE>
								        <EVAL exec="KFB= BigDecimal.ZERO"/>
									  </ELSE>
									</IF>
							 </ELSE>
							</IF>
						</ELSE>	
					</IF>  	
				</ELSE>	
			</IF>	
		</ELSE>	
    </IF>
    <EVAL exec="ZTABFB= (EFA.add (ANP).add (SAP).add (FVBZ)).setScale (2, BigDecimal.ROUND_DOWN)"/>
  </METHOD>

  <!-- Ermittlung Jahreslohnsteuer, PAP Seite 22 -->
  <METHOD name="MLSTJAHR">
     <EXECUTE method="UPEVP"/>
    <IF expr="KENNVMT != 1">
      <THEN>
        <EVAL exec="ZVE= (ZRE4.subtract (ZTABFB).subtract (VSP)).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <EXECUTE method="UPMLST"/>
      </THEN>
      <ELSE>
        <EVAL exec="ZVE= (ZRE4.subtract (ZTABFB).subtract (VSP).subtract ((VMT).divide (ZAHL100)).subtract ((VKAPA).divide (ZAHL100))).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <IF expr="ZVE.compareTo (BigDecimal.ZERO) == -1">
          <THEN>
            <EVAL exec=" ZVE = ZVE.add(VMT.divide(ZAHL100)).add(VKAPA.divide(ZAHL100)).divide(ZAHL5).setScale(2,BigDecimal.ROUND_DOWN)"/>
            <EXECUTE method="UPMLST"/>
            <EVAL exec="ST= (ST.multiply (ZAHL5)).setScale (0, BigDecimal.ROUND_DOWN)"/> 
          </THEN>
          <ELSE>
            <EXECUTE method="UPMLST"/>
	        <EVAL exec="STOVMT= ST"/>
            <EVAL exec="ZVE= (ZVE.add(((VMT.add (VKAPA)).divide (ZAHL500)))).setScale (2, BigDecimal.ROUND_DOWN)"/>
            <EXECUTE method="UPMLST"/>
            <EVAL exec="ST= (((ST.subtract (STOVMT)).multiply (ZAHL5)).add (STOVMT)).setScale (0, BigDecimal.ROUND_DOWN)"/> 
          </ELSE>
        </IF>
      </ELSE>
    </IF> 
  </METHOD>
  
  <!-- PAP Seite 23 --> 
  <METHOD name="UPVKVLZZ">
	 <EXECUTE method="UPVKV"/>
	 <EVAL exec="JW = VKV"/>
	 <EXECUTE method="UPANTEIL"/>
	 <EVAL exec="VKVLZZ = ANTEIL1"/>
  </METHOD>

  <!-- PAP Seite 23 --> 
  <METHOD name="UPVKV">
	 <IF expr="PKV &gt; 0">
		<THEN>
			<IF expr="VSP2.compareTo(VSP3) == 1">
				<THEN>
					<EVAL exec="VKV = VSP2.multiply(ZAHL100)"/>
				</THEN>
				<ELSE>
					<EVAL exec="VKV = VSP3.multiply(ZAHL100)"/>
				</ELSE>
			</IF>
		</THEN>
		<ELSE>
			<EVAL exec="VKV = BigDecimal.ZERO"/>
		</ELSE>
	</IF>
  </METHOD>
  
  <!-- PAP Seite 24 -->
   <METHOD name="UPLSTLZZ">
   	  <EVAL exec="JW = LSTJAHR.multiply(ZAHL100)"/>  
	  <EXECUTE method="UPANTEIL"/>
	  <EVAL exec="LSTLZZ = ANTEIL1"/>
   </METHOD>
	
  <!-- Ermittlung der Jahreslohnsteuer aus dem Einkommensteuertarif. PAP Seite 25 -->
  <METHOD name="UPMLST">
	<IF expr="ZVE.compareTo (ZAHL1) == -1">
      <THEN>
        <EVAL exec="ZVE= BigDecimal.ZERO"/>
        <EVAL exec="X= BigDecimal.ZERO"/>
      </THEN>
      <ELSE>
        <EVAL exec="X= (ZVE.divide (BigDecimal.valueOf(KZTAB))).setScale (0, BigDecimal.ROUND_DOWN)"/>
      </ELSE>
    </IF>
	<IF expr="STKL &lt; 5">
      <THEN>
      
      	 <!-- Neu 2018 -->
      	 <EXECUTE method="UPTAB18"/> 

      </THEN>
      <ELSE>
        <EXECUTE method="MST5_6"/>
      </ELSE>
    </IF>
  </METHOD>	  

  <!-- 	Vorsorgepauschale (§ 39b Absatz 2 Satz 5 Nummer 3 und Absatz 4 EStG)
  			Achtung: Es wird davon ausgegangen, dass	
  				a) Es wird davon ausge-gangen, dassa) für die BBG (Ost) 60.000 Euro und für die BBG (West) 71.400 Euro festgelegt wird sowie
  				b) der Beitragssatz zur Rentenversicherung auf 18,9 % gesenkt wird.
  			
  			PAP Seite 26  -->
  <METHOD name="UPEVP">
    <IF expr="KRV &gt; 1"><!-- &lt; = < &gt; = > -->
      <THEN>
        <EVAL exec="VSP1= BigDecimal.ZERO"/>
      </THEN>
		<ELSE>  
		    <IF expr="ZRE4VP.compareTo(BBGRV) == 1">
      			<THEN>
      				<EVAL exec="ZRE4VP = BBGRV"/>
      			</THEN>
      		</IF>
      		<EVAL exec="VSP1 = (TBSVORV.multiply(ZRE4VP)).setScale(2,BigDecimal.ROUND_DOWN)"/>
      		<EVAL exec="VSP1 = (VSP1.multiply(RVSATZAN)).setScale(2,BigDecimal.ROUND_DOWN)"/>
	    </ELSE>
    </IF>
    <EVAL exec="VSP2 = (ZRE4VP.multiply(BigDecimal.valueOf(0.12))).setScale(2,BigDecimal.ROUND_DOWN)"/>
    <IF expr="STKL == 3">
	    <THEN>
	        <EVAL exec="VHB = BigDecimal.valueOf(3000)"/>
	    </THEN>
	    <ELSE>
	        <EVAL exec="VHB = BigDecimal.valueOf(1900)"/>
	    </ELSE>
     </IF>
    <IF expr="VSP2.compareTo (VHB) == 1">
      <THEN>
        <EVAL exec="VSP2= VHB"/>
      </THEN>
    </IF>
    <EVAL exec="VSPN= (VSP1.add (VSP2)).setScale (0, BigDecimal.ROUND_UP)"/>
    <EXECUTE method="MVSP"/>
    <IF expr="VSPN.compareTo (VSP) == 1">
      <THEN>
        <EVAL exec="VSP= VSPN.setScale (2, BigDecimal.ROUND_DOWN)"/>
      </THEN>
    </IF>
  </METHOD>
 
  <!-- Vorsorgepauschale (§39b Abs. 2 Satz 5 Nr 3 EStG) Vergleichsberechnung fuer Guenstigerpruefung, PAP Seite 27 -->
  <METHOD name="MVSP">
    <IF expr="ZRE4VP.compareTo(BBGKVPV) == 1">
      <THEN>
	  	<EVAL exec="ZRE4VP = BBGKVPV"/>
	  </THEN>
    </IF>

    <IF expr="PKV &gt; 0">
      <THEN>
			    <IF expr="STKL == 6">
			      <THEN>
						<EVAL exec="VSP3 = BigDecimal.ZERO"/>
				  </THEN>
				  <ELSE>
				    	<EVAL exec="VSP3 = PKPV.multiply(ZAHL12).divide(ZAHL100)"/>
						<IF expr="PKV == 2">
						    <THEN>
									<EVAL exec="VSP3 = VSP3.subtract( ZRE4VP.multiply( KVSATZAG.add(PVSATZAG))).setScale(2,BigDecimal.ROUND_DOWN)"/>
							</THEN>	    		
						</IF>
				  </ELSE>
			    </IF>
	    </THEN>
	    <ELSE>
				<EVAL exec="VSP3 = ZRE4VP.multiply(KVSATZAN.add(PVSATZAN)).setScale(2, BigDecimal.ROUND_DOWN)"/>
	    </ELSE>
    </IF>
		<EVAL exec="VSP = VSP3.add(VSP1).setScale(0, BigDecimal.ROUND_UP)"/>
  </METHOD>

  <!-- Lohnsteuer fuer die Steuerklassen V und VI (§ 39b Abs. 2 Satz 7 EStG), PAP Seite 28 -->
  <METHOD name="MST5_6">
    <EVAL exec="ZZX= X"/>
    <IF expr="ZZX.compareTo(W2STKL5) == 1">
      <THEN>
        <EVAL exec="ZX= W2STKL5"/>
        <EXECUTE method="UP5_6"/>
	    <IF expr="ZZX.compareTo (W3STKL5) == 1">
	      <THEN>
            <EVAL exec="ST= (ST.add ((W3STKL5.subtract (W2STKL5)).multiply (BigDecimal.valueOf (0.42)))).setScale (0, BigDecimal.ROUND_DOWN)"/>
            <EVAL exec="ST= (ST.add ((ZZX.subtract (W3STKL5)).multiply (BigDecimal.valueOf (0.45)))).setScale (0, BigDecimal.ROUND_DOWN)"/>
          </THEN>
          <ELSE>
            <EVAL exec="ST= (ST.add ((ZZX.subtract (W2STKL5)).multiply (BigDecimal.valueOf (0.42)))).setScale (0, BigDecimal.ROUND_DOWN)"/>
          </ELSE>
        </IF>
      </THEN>
      <ELSE>
        <EVAL exec="ZX= ZZX"/>
        <EXECUTE method="UP5_6"/>
        <IF expr="ZZX.compareTo (W1STKL5) == 1"> 
          <THEN>
            <EVAL exec="VERGL= ST"/>
            <EVAL exec="ZX= W1STKL5"/> 
            <EXECUTE method="UP5_6"/>
            <EVAL exec="HOCH= (ST.add ((ZZX.subtract (W1STKL5)).multiply (BigDecimal.valueOf (0.42)))).setScale (0, BigDecimal.ROUND_DOWN)"/>
            <IF expr="HOCH.compareTo (VERGL) == -1">
              <THEN>
                <EVAL exec="ST= HOCH"/>
              </THEN>
              <ELSE>
                <EVAL exec="ST= VERGL"/>
              </ELSE>
            </IF>
          </THEN>
        </IF>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Unterprogramm zur Lohnsteuer fuer die Steuerklassen V und VI (§ 39b Abs. 2 Satz 7 EStG), PAP Seite 29 -->
  <METHOD name="UP5_6">
    <EVAL exec="X= (ZX.multiply (BigDecimal.valueOf (1.25))).setScale (2, BigDecimal.ROUND_DOWN)"/>
    
   	 <!-- Neu 2018 -->
   	<EXECUTE method="UPTAB18"/> 
    
    <EVAL exec="ST1= ST"/>
    <EVAL exec="X= (ZX.multiply (BigDecimal.valueOf (0.75))).setScale (2, BigDecimal.ROUND_DOWN)"/>
    
   	 <!-- Neu 2018 -->
   	 <EXECUTE method="UPTAB18"/> 
    
    <EVAL exec="ST2= ST"/>
    <EVAL exec="DIFF= (ST1.subtract (ST2)).multiply (ZAHL2)"/>
    <EVAL exec="MIST= (ZX.multiply (BigDecimal.valueOf (0.14))).setScale (0, BigDecimal.ROUND_DOWN)"/>
    <IF expr="MIST.compareTo (DIFF) == 1">
      <THEN>
        <EVAL exec="ST= MIST"/>
      </THEN>
      <ELSE>
        <EVAL exec="ST= DIFF"/>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Solidaritaetszuschlag, PAP Seite 30 -->
  <METHOD name="MSOLZ">
    <EVAL exec="SOLZFREI = (SOLZFREI.multiply(BigDecimal.valueOf(KZTAB)))"/> 
    <IF expr="JBMG.compareTo (SOLZFREI) == 1">
      <THEN>
        <EVAL exec="SOLZJ= (JBMG.multiply (BigDecimal.valueOf (5.5))).divide(ZAHL100).setScale(2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="SOLZMIN= (JBMG.subtract (SOLZFREI)).multiply (BigDecimal.valueOf (20)).divide (ZAHL100).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <IF expr="SOLZMIN.compareTo (SOLZJ) == -1">
          <THEN>
            <EVAL exec="SOLZJ= SOLZMIN"/>
          </THEN>
        </IF>
        <EVAL exec="JW= SOLZJ.multiply (ZAHL100).setScale (0, BigDecimal.ROUND_DOWN)"/>
                
        <EXECUTE method="UPANTEIL"/>
        
        <EVAL exec="SOLZLZZ= ANTEIL1"/>
      </THEN>
      <ELSE>
        <EVAL exec="SOLZLZZ= BigDecimal.ZERO"/>
      </ELSE>
    </IF>
    <IF expr="R &gt; 0">
      <THEN>
        <EVAL exec="JW= JBMG.multiply (ZAHL100)"/>        
        
        <EXECUTE method="UPANTEIL"/>
        <EVAL exec="BK= ANTEIL1"/>
      </THEN>
      <ELSE>
        <EVAL exec="BK= BigDecimal.ZERO"/>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Anteil von Jahresbetraegen fuer einen LZZ (§ 39b Abs. 2 Satz 9 EStG), PAP Seite 31 -->
  <METHOD name="UPANTEIL">
    <IF expr="LZZ == 1">
      <THEN>
        <EVAL exec="ANTEIL1= JW"/>
      </THEN>
      <ELSE>
        <IF expr="LZZ == 2">
          <THEN>
            <EVAL exec="ANTEIL1= JW.divide (ZAHL12, 0, BigDecimal.ROUND_DOWN)"/>
          </THEN>
          <ELSE>
            <IF expr="LZZ == 3">
              <THEN> 
                <EVAL exec="ANTEIL1= (JW.multiply (ZAHL7)).divide (ZAHL360, 0, BigDecimal.ROUND_DOWN)"/>
              </THEN>
              <ELSE>
                <EVAL exec="ANTEIL1= JW.divide (ZAHL360, 0, BigDecimal.ROUND_DOWN)"/>
              </ELSE>
            </IF>
          </ELSE>
        </IF>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Berechnung sonstiger Bezuege nach § 39b Abs. 3 Saetze 1 bis 8 EStG), PAP Seite 32 -->
  <METHOD name="MSONST">
    <EVAL exec="LZZ= 1"/>
    <IF expr="ZMVB == 0">
      <THEN>
        <EVAL exec="ZMVB= 12"/>
      </THEN>
    </IF>
    <IF expr="SONSTB.compareTo (BigDecimal.ZERO) == 0">
      <THEN>
        <EVAL exec="VKVSONST= BigDecimal.ZERO"/>
        <EVAL exec="LSTSO= BigDecimal.ZERO"/>
        <EVAL exec="STS= BigDecimal.ZERO"/>
        <EVAL exec="SOLZS= BigDecimal.ZERO"/>
        <EVAL exec="BKS= BigDecimal.ZERO"/>
      </THEN>
      <ELSE>
        <EXECUTE method="MOSONST"/>
        <EXECUTE method="UPVKV"/>
        <EVAL exec="VKVSONST = VKV"/>
        <EVAL exec="ZRE4J= ((JRE4.add (SONSTB)).divide (ZAHL100)).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="ZVBEZJ= ((JVBEZ.add (VBS)).divide (ZAHL100)).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="VBEZBSO= STERBE"/>
        <EXECUTE method="MRE4SONST"/>
        <EXECUTE method="MLSTJAHR"/>
        
         <EVAL exec="WVFRBM = (ZVE.subtract(GFB)).multiply(ZAHL100).setScale(2,BigDecimal.ROUND_DOWN)"/>
         <IF expr="WVFRBM.compareTo(BigDecimal.ZERO) == -1"> <!-- WVFRBM < 0 -->
          <THEN>
            <EVAL exec="WVFRBM = BigDecimal.ZERO"/>
          </THEN>
        </IF>
        
        <EXECUTE method="UPVKV"/>
        <EVAL exec="VKVSONST = VKV.subtract(VKVSONST)"/>
        <EVAL exec="LSTSO= ST.multiply (ZAHL100)"/>
        <!-- 	lt. PAP muss hier auf ganze EUR aufgerundet werden, 
        			allerdings muss der Wert in Cent vorgehalten werden,
        			deshalb nach dem Aufrunden auf ganze EUR durch 'divide(ZAHL100, 0, BigDecimal.ROUND_DOWN)'
        			wieder die Multiplikation mit 100 -->
        <EVAL exec="STS = LSTSO.subtract(LSTOSO).multiply(BigDecimal.valueOf(f)).divide(ZAHL100, 0, BigDecimal.ROUND_DOWN).multiply(ZAHL100)"/>
        <IF expr="STS.compareTo (BigDecimal.ZERO) == -1">
          <THEN>
            <EVAL exec="STS= BigDecimal.ZERO"/>
          </THEN>
        </IF>
        <EVAL exec="SOLZS= STS.multiply (BigDecimal.valueOf (5.5)).divide (ZAHL100, 0, BigDecimal.ROUND_DOWN)"/>
        <IF expr="R &gt; 0">
          <THEN>
            <EVAL exec="BKS= STS"/>
          </THEN>
          <ELSE>
            <EVAL exec="BKS= BigDecimal.ZERO"/>
          </ELSE>
        </IF>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Berechnung der Verguetung fuer mehrjaehrige Taetigkeit nach § 39b Abs. 3 Satz 9 und 10 EStG), PAP Seite 33 -->
  <METHOD name="MVMT">
    <IF expr="VKAPA.compareTo (BigDecimal.ZERO) == -1">
      <THEN>
        <EVAL exec="VKAPA= BigDecimal.ZERO"/>
      </THEN>
    </IF>
    <IF expr="(VMT.add (VKAPA)).compareTo (BigDecimal.ZERO) == 1">
      <THEN>
        <IF expr="LSTSO.compareTo (BigDecimal.ZERO) == 0">
          <THEN>
            <EXECUTE method="MOSONST"/>
            <EVAL exec="LST1= LSTOSO"/>
          </THEN>
          <ELSE>
            <EVAL exec="LST1= LSTSO"/>
          </ELSE>
        </IF>
        <EVAL exec="VBEZBSO= STERBE.add (VKAPA)"/>
        <EVAL exec="ZRE4J= ((JRE4.add (SONSTB).add (VMT).add (VKAPA)).divide (ZAHL100)).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="ZVBEZJ= ((JVBEZ.add (VBS).add (VKAPA)).divide (ZAHL100)).setScale (2, BigDecimal.ROUND_DOWN)"/>
        <EVAL exec="KENNVMT = 2"/>
        <EXECUTE method="MRE4SONST"/>
        <EXECUTE method="MLSTJAHR"/>
        <EVAL exec="LST3= ST.multiply (ZAHL100)"/>
        <EXECUTE method="MRE4ABZ"/>
        <EVAL exec="ZRE4VP = ZRE4VP.subtract(JRE4ENT.divide(ZAHL100)).subtract(SONSTENT.divide(ZAHL100))"/>
        <EVAL exec="KENNVMT= 1"/>
        <EXECUTE method="MLSTJAHR"/>
        <EVAL exec="LST2= ST.multiply (ZAHL100)"/>
        <EVAL exec="STV= LST2.subtract (LST1)"/> 
        <EVAL exec="LST3= LST3.subtract (LST1)"/>
        <IF expr="LST3.compareTo (STV) == -1">
          <THEN>
            <EVAL exec="STV= LST3"/>
          </THEN>
        </IF>
        <IF expr="STV.compareTo (BigDecimal.ZERO) == -1">
          <THEN>
            <EVAL exec="STV= BigDecimal.ZERO"/>
          </THEN>
        	<ELSE>
	        	<!--	
	        		lt. PAP muss hier auf ganze EUR abgerundet werden.
   	        	Allerdings muss auch hier der Wert in Cent vorgehalten werden,
        			weshalb nach dem Aufrunden auf ganze EUR durch 'divide(ZAHL100, 0, BigDecimal.ROUND_DOWN)'
        			wieder die Multiplikation mit 100 erfolgt.
        		-->
	        	<EVAL exec="STV = STV.multiply(BigDecimal.valueOf(f)).divide(ZAHL100, 0, BigDecimal.ROUND_DOWN).multiply(ZAHL100)"/>
        	</ELSE>
        </IF>
				<EVAL exec="SOLZV= ((STV.multiply (BigDecimal.valueOf (5.5))).divide (ZAHL100)).setScale (0, BigDecimal.ROUND_DOWN)"/>
        <IF expr="R &gt; 0">
          <THEN>
            <EVAL exec="BKV= STV"/>
          </THEN>
          <ELSE>
            <EVAL exec="BKV= BigDecimal.ZERO"/>
          </ELSE>
        </IF>
      </THEN>
      <ELSE> 
        <EVAL exec="STV= BigDecimal.ZERO"/>
        <EVAL exec="SOLZV= BigDecimal.ZERO"/>
        <EVAL exec="BKV= BigDecimal.ZERO"/>
      </ELSE>
    </IF>
  </METHOD>

  <!-- Sonderberechnung ohne sonstige Bezüge für Berechnung bei sonstigen Bezügen oder Vergütung für mehrjährige Tätigkeit, PAP Seite 34 -->
  <METHOD name="MOSONST">
    <EVAL exec="ZRE4J= (JRE4.divide (ZAHL100)).setScale (2, BigDecimal.ROUND_DOWN)"/>
    <EVAL exec="ZVBEZJ= (JVBEZ.divide (ZAHL100)).setScale (2, BigDecimal.ROUND_DOWN)"/>
    <EVAL exec="JLFREIB= JFREIB.divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
    <EVAL exec="JLHINZU= JHINZU.divide (ZAHL100, 2, BigDecimal.ROUND_DOWN)"/>
    <EXECUTE method="MRE4"/>
    <EXECUTE method="MRE4ABZ"/>
    <EVAL exec="ZRE4VP = ZRE4VP.subtract(JRE4ENT.divide(ZAHL100))"/>
    <EXECUTE method="MZTABFB"/> 
    <EVAL exec="VFRBS1 = ((ANP.add(FVB.add(FVBZ))).multiply(ZAHL100)).setScale(2,BigDecimal.ROUND_DOWN)"/>
    <EXECUTE method="MLSTJAHR"/>
    
     <EVAL exec="WVFRBO = ((ZVE.subtract(GFB)).multiply(ZAHL100)).setScale(2, BigDecimal.ROUND_DOWN)"/>
     <IF expr="WVFRBO.compareTo(BigDecimal.ZERO) == -1 ">
	     <THEN>
	            <EVAL exec="WVFRBO = BigDecimal.ZERO"/>
	     </THEN>
     </IF>
    
    <EVAL exec="LSTOSO= ST.multiply (ZAHL100)"/>
  </METHOD>

  <!-- Sonderberechnung mit sonstige Bezüge für Berechnung bei sonstigen Bezügen oder Vergütung für mehrjährige Tätigkeit, PAP Seite 35 -->
  <METHOD name="MRE4SONST">
    <EXECUTE method="MRE4"/>
    <EVAL exec="FVB= FVBSO"/>
    <EXECUTE method="MRE4ABZ"/>
    <EVAL exec="ZRE4VP = ZRE4VP.subtract(JRE4ENT.divide(ZAHL100)).subtract(SONSTENT.divide(ZAHL100))"/>
    <EVAL exec="FVBZ= FVBZSO"/>
    <EXECUTE method="MZTABFB"/> 
    <EVAL exec="VFRBS2 = ((((ANP.add(FVB).add(FVBZ))).multiply(ZAHL100))).subtract(VFRBS1)"/>
  </METHOD>
  
  <!-- Komplett Neu 2018 -->
     <!-- Tarifliche Einkommensteuer §32a EStG, PAP Seite 36 -->
  <METHOD name="UPTAB18">
    <IF expr="X.compareTo(GFB.add(ZAHL1)) == -1"> 
      <THEN>
        <EVAL exec="ST= BigDecimal.ZERO"/>
      </THEN>
      <ELSE>
        <IF expr="X.compareTo (BigDecimal.valueOf (13997)) == -1">
          <THEN>
            <EVAL exec="Y = (X.subtract(GFB)).divide(ZAHL10000, 6,BigDecimal.ROUND_DOWN)"/> 
            <EVAL exec="RW= Y.multiply (BigDecimal.valueOf (997.8))"/> 
            <EVAL exec="RW= RW.add (BigDecimal.valueOf (1400))"/>
            <EVAL exec="ST= (RW.multiply (Y)).setScale (0, BigDecimal.ROUND_DOWN)"/>
          </THEN>
          <ELSE>
            <IF expr="X.compareTo (BigDecimal.valueOf (54950)) == -1">
              <THEN>
                <EVAL exec="Y= (X.subtract (BigDecimal.valueOf (13996))).divide (ZAHL10000, 6, BigDecimal.ROUND_DOWN)"/>
                <EVAL exec="RW= Y.multiply (BigDecimal.valueOf (220.13))"/>
                <EVAL exec="RW= RW.add (BigDecimal.valueOf (2397))"/>
                <EVAL exec="RW= RW.multiply (Y)"/>
                <EVAL exec="ST= (RW.add (BigDecimal.valueOf (948.49))).setScale (0, BigDecimal.ROUND_DOWN)"/> 
              </THEN>
              <ELSE>
	            <IF expr="X.compareTo (BigDecimal.valueOf (260533)) == -1">
	              <THEN>
                    <EVAL exec="ST= ((X.multiply (BigDecimal.valueOf (0.42))).subtract (BigDecimal.valueOf (8621.75))).setScale (0, BigDecimal.ROUND_DOWN)"/> 
                  </THEN>
                  <ELSE>
                    <EVAL exec="ST= ((X.multiply (BigDecimal.valueOf (0.45))).subtract (BigDecimal.valueOf (16437.7))).setScale (0, BigDecimal.ROUND_DOWN)"/> 
                  </ELSE>
                </IF>
              </ELSE>
            </IF>
          </ELSE>
        </IF>
      </ELSE>
    </IF>
    <EVAL exec="ST= ST.multiply (BigDecimal.valueOf (KZTAB))"/>
  </METHOD>
  
</METHODS>
</PAP>